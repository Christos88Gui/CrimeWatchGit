@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@{
    ViewBag.Title = "Map page";
}
@model List<CrimeWatch.Models.Crime>


<style>
    #legend, #map {
        width: auto;
        background-color: lightgray;
        border: 2px solid black;
        height: 500px;
        color: black;
    }

    .form-control {
        border: 1px solid black;
    }
</style>
<br /><br />
      

<div id="map"></div>       
<div class="container" id="legend" style="padding-left:20px; height:300px; display:none">
    <form action="/Map/Index" method="post">

        <br />
        <p>Address:</p>
        <input id="address" type="text" class="form-control" placeholder="Postcode,Address,City...">
        <br />
        <input id="submit" type="button" class="btn btn-default" value="Search">
        <br /><br />
        <p>Time period</p>
        <label class="radio-inline"><input type="radio" name="optradio">2016</label>
        <label class="radio-inline"><input type="radio" name="optradio">2017</label>
        <label class="radio-inline"><input type="radio" name="optradio">Both</label>
        <br /><br />
        <p>Type of crime</p>
        <select class="form-control" name="type">
            <option selected>No filter</option>
            <option>Drugs</option>
            <option>Anti-social behaviour</option>
            <option>Burglary</option>
        </select>
        <br />
        <input type="submit" class="btn btn-default" value="Submit">
        <button class="btn-xs btn-default" style="float:right; border: 1px solid black; font-size:12px; background-color:lightcoral">Reset filters</button>
    </form>
</div>




<script>
    function initializeMap(position) {
        var initialPosition = { lat: 51.502775, lng: -0.119927 };
        var iconBase = 'https://maps.google.com/mapfiles/kml/shapes/';

        if (position != null) {
            var initialPosition = { lat: position.coords.latitude, lng: position.coords.longitude };
        }

        var mapOptions = {
            center: initialPosition,
            zoom: 10,
        };

        var map = new google.maps.Map(document.getElementById('map'), mapOptions);
        
        map.controls[google.maps.ControlPosition.LEFT].push(legend);
        document.getElementById('legend').style.display = "block";

        var marker = new google.maps.Marker({
            position: initialPosition,
            icon: iconBase + 'library_maps.png',
            animation: google.maps.Animation.DROP,
            map: map,
          
        });

        var infowindow = new google.maps.InfoWindow({
            content: "<p><b>Your location!</></p>"
        });

        marker.addListener('click', function () {
            infowindow.open(map, marker);
        });


        var geocoder = new google.maps.Geocoder();
        document.getElementById('submit').addEventListener('click', function () {
            geocodeAddress(geocoder, map);
        });

        addMarkers(map);
    }


    function addMarkers(map) {
        var crimes = [];
        var infowindow = new google.maps.InfoWindow();
        var marker = [], i;        

        @foreach (var crime in Model) {
            @:crimes.push(["@crime.Latitude", "@crime.Longitude","@crime.Type","@crime.Date","@crime.Police_Department", "@crime.Location","@crime.Outcome"]);
        }

        for (i = 0; i < crimes.length; i++) {
            marker[i] = new google.maps.Marker({
                position: new google.maps.LatLng(crimes[i][0], crimes[i][1]),
                map: map
            });

            google.maps.event.addListener(marker[i], 'click', (function (marker, i) {
                return function () {
                    infowindow.setContent("<br><p><b>Crime Type: </b> " + crimes[i][2] + "</p><p><b>Date:</b> " + crimes[i][3] + "</p><p><b>Department </b> " + crimes[i][4] + "</p><p><b>Exact Location: </b> " + crimes[i][5] + "<p><b>Outcome: </b> " + crimes[i][6] );
                    infowindow.open(map, marker[i]);
                }
            })(marker, i));
        }
        var mapOptions = { maxZoom: 15, imagePath: 'https://raw.githubusercontent.com/googlemaps/js-marker-clusterer/gh-pages/images/m' };
        var markerCluster = new MarkerClusterer(map, marker, mapOptions);        

    }



    function requestLocation() {
        navigator.geolocation.getCurrentPosition(initializeMap);

    }

    function geocodeAddress(geocoder, resultsMap) {
        var address = document.getElementById('address').value;
        geocoder.geocode({ 'address': address }, function (results, status) {
            if (status === 'OK') {
                resultsMap.setCenter(results[0].geometry.location);
                var marker = new google.maps.Marker({
                    position: results[0].geometry.location,
                    map: resultsMap
                });

            } else {
                alert('Geocode was not successful for the following reason: ' + status);
            }
        });
    }

</script>
<script src="~/Scripts/markerClustering.js">
</script>
<script async defer
        src="https://maps.googleapis.com/maps/api/js?key=AIzaSyD_rXEE2-a_KrNsOkLH0sxMr96NVZjaiTI&callback=requestLocation">
</script>










@*function initMap() {
        var map = new google.maps.Map(document.getElementById('map'), {
            zoom: 6,
            center: { lat: -34.397, lng: 150.644 }
        });


        var geocoder = new google.maps.Geocoder();
        document.getElementById('submit').addEventListener('click', function () {
            geocodeAddress(geocoder, map);
        });
    }

    function geocodeAddress(geocoder, resultsMap) {
        var address = document.getElementById('address').value;
        geocoder.geocode({ 'address': address }, function (results, status) {
            if (status === 'OK') {
                resultsMap.setCenter(results[0].geometry.location);
                var marker = new google.maps.Marker({
                    map: resultsMap,
                    position: results[0].geometry.location
                });
            } else {
                alert('Geocode was not successful for the following reason: ' + status);
            }
        });
    }

    function success(pos) {
        var crd = pos.coords;

        console.log('Your current position is:');
        console.log(`Latitude : ${crd.latitude}`);
        console.log(`Longitude: ${crd.longitude}`);
        console.log(`More or less ${crd.accuracy} meters.`);
    };

    function error(err) {
        console.warn(`ERROR(${err.code}): ${err.message}`);
    };

    navigator.geolocation.getCurrentPosition(success, error);*@